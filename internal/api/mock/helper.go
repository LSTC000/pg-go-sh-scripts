// Code generated by MockGen. DO NOT EDIT.
// Source: ./helper.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	schema "pg-sh-scripts/internal/schema"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockIHelper is a mock of IHelper interface.
type MockIHelper struct {
	ctrl     *gomock.Controller
	recorder *MockIHelperMockRecorder
}

// MockIHelperMockRecorder is the mock recorder for MockIHelper.
type MockIHelperMockRecorder struct {
	mock *MockIHelper
}

// NewMockIHelper creates a new mock instance.
func NewMockIHelper(ctrl *gomock.Controller) *MockIHelper {
	mock := &MockIHelper{ctrl: ctrl}
	mock.recorder = &MockIHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHelper) EXPECT() *MockIHelperMockRecorder {
	return m.recorder
}

// ParseError mocks base method.
func (m *MockIHelper) ParseError(arg0 *gin.Context, arg1 error) *schema.HTTPError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseError", arg0, arg1)
	ret0, _ := ret[0].(*schema.HTTPError)
	return ret0
}

// ParseError indicates an expected call of ParseError.
func (mr *MockIHelperMockRecorder) ParseError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseError", reflect.TypeOf((*MockIHelper)(nil).ParseError), arg0, arg1)
}
