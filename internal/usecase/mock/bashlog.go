// Code generated by MockGen. DO NOT EDIT.
// Source: ./bashlog.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	alias "pg-sh-scripts/internal/type/alias"
	pagination "pg-sh-scripts/pkg/sql/pagination"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/go.uuid"
)

// MockIBashLogUseCase is a mock of IBashLogUseCase interface.
type MockIBashLogUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIBashLogUseCaseMockRecorder
}

// MockIBashLogUseCaseMockRecorder is the mock recorder for MockIBashLogUseCase.
type MockIBashLogUseCaseMockRecorder struct {
	mock *MockIBashLogUseCase
}

// NewMockIBashLogUseCase creates a new mock instance.
func NewMockIBashLogUseCase(ctrl *gomock.Controller) *MockIBashLogUseCase {
	mock := &MockIBashLogUseCase{ctrl: ctrl}
	mock.recorder = &MockIBashLogUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBashLogUseCase) EXPECT() *MockIBashLogUseCaseMockRecorder {
	return m.recorder
}

// GetBashLogPaginationPageByBashId mocks base method.
func (m *MockIBashLogUseCase) GetBashLogPaginationPageByBashId(bashId uuid.UUID, paginationParams pagination.LimitOffsetParams) (alias.BashLogLimitOffsetPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBashLogPaginationPageByBashId", bashId, paginationParams)
	ret0, _ := ret[0].(alias.BashLogLimitOffsetPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBashLogPaginationPageByBashId indicates an expected call of GetBashLogPaginationPageByBashId.
func (mr *MockIBashLogUseCaseMockRecorder) GetBashLogPaginationPageByBashId(bashId, paginationParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBashLogPaginationPageByBashId", reflect.TypeOf((*MockIBashLogUseCase)(nil).GetBashLogPaginationPageByBashId), bashId, paginationParams)
}
