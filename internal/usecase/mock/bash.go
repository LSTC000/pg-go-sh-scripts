// Code generated by MockGen. DO NOT EDIT.
// Source: ./bash.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	bytes "bytes"
	multipart "mime/multipart"
	dto "pg-sh-scripts/internal/dto"
	model "pg-sh-scripts/internal/model"
	alias "pg-sh-scripts/internal/type/alias"
	pagination "pg-sh-scripts/pkg/sql/pagination"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/go.uuid"
)

// MockIBashUseCase is a mock of IBashUseCase interface.
type MockIBashUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIBashUseCaseMockRecorder
}

// MockIBashUseCaseMockRecorder is the mock recorder for MockIBashUseCase.
type MockIBashUseCaseMockRecorder struct {
	mock *MockIBashUseCase
}

// NewMockIBashUseCase creates a new mock instance.
func NewMockIBashUseCase(ctrl *gomock.Controller) *MockIBashUseCase {
	mock := &MockIBashUseCase{ctrl: ctrl}
	mock.recorder = &MockIBashUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBashUseCase) EXPECT() *MockIBashUseCaseMockRecorder {
	return m.recorder
}

// CreateBash mocks base method.
func (m *MockIBashUseCase) CreateBash(file *multipart.FileHeader) (*model.Bash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBash", file)
	ret0, _ := ret[0].(*model.Bash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBash indicates an expected call of CreateBash.
func (mr *MockIBashUseCaseMockRecorder) CreateBash(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBash", reflect.TypeOf((*MockIBashUseCase)(nil).CreateBash), file)
}

// ExecBashList mocks base method.
func (m *MockIBashUseCase) ExecBashList(isSync bool, dto []dto.ExecBash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecBashList", isSync, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecBashList indicates an expected call of ExecBashList.
func (mr *MockIBashUseCaseMockRecorder) ExecBashList(isSync, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecBashList", reflect.TypeOf((*MockIBashUseCase)(nil).ExecBashList), isSync, dto)
}

// GetBashById mocks base method.
func (m *MockIBashUseCase) GetBashById(bashId uuid.UUID) (*model.Bash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBashById", bashId)
	ret0, _ := ret[0].(*model.Bash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBashById indicates an expected call of GetBashById.
func (mr *MockIBashUseCaseMockRecorder) GetBashById(bashId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBashById", reflect.TypeOf((*MockIBashUseCase)(nil).GetBashById), bashId)
}

// GetBashFileBufferById mocks base method.
func (m *MockIBashUseCase) GetBashFileBufferById(bashId uuid.UUID) (*bytes.Buffer, alias.BashTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBashFileBufferById", bashId)
	ret0, _ := ret[0].(*bytes.Buffer)
	ret1, _ := ret[1].(alias.BashTitle)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBashFileBufferById indicates an expected call of GetBashFileBufferById.
func (mr *MockIBashUseCaseMockRecorder) GetBashFileBufferById(bashId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBashFileBufferById", reflect.TypeOf((*MockIBashUseCase)(nil).GetBashFileBufferById), bashId)
}

// GetBashPaginationPage mocks base method.
func (m *MockIBashUseCase) GetBashPaginationPage(paginationParams pagination.LimitOffsetParams) (alias.BashLimitOffsetPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBashPaginationPage", paginationParams)
	ret0, _ := ret[0].(alias.BashLimitOffsetPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBashPaginationPage indicates an expected call of GetBashPaginationPage.
func (mr *MockIBashUseCaseMockRecorder) GetBashPaginationPage(paginationParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBashPaginationPage", reflect.TypeOf((*MockIBashUseCase)(nil).GetBashPaginationPage), paginationParams)
}

// RemoveBashById mocks base method.
func (m *MockIBashUseCase) RemoveBashById(bashId uuid.UUID) (*model.Bash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBashById", bashId)
	ret0, _ := ret[0].(*model.Bash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBashById indicates an expected call of RemoveBashById.
func (mr *MockIBashUseCaseMockRecorder) RemoveBashById(bashId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBashById", reflect.TypeOf((*MockIBashUseCase)(nil).RemoveBashById), bashId)
}
