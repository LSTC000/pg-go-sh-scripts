// Code generated by MockGen. DO NOT EDIT.
// Source: ./bashlog.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	dto "pg-sh-scripts/internal/dto"
	model "pg-sh-scripts/internal/model"
	alias "pg-sh-scripts/internal/type/alias"
	pagination "pg-sh-scripts/pkg/sql/pagination"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/go.uuid"
)

// MockIBashLogService is a mock of IBashLogService interface.
type MockIBashLogService struct {
	ctrl     *gomock.Controller
	recorder *MockIBashLogServiceMockRecorder
}

// MockIBashLogServiceMockRecorder is the mock recorder for MockIBashLogService.
type MockIBashLogServiceMockRecorder struct {
	mock *MockIBashLogService
}

// NewMockIBashLogService creates a new mock instance.
func NewMockIBashLogService(ctrl *gomock.Controller) *MockIBashLogService {
	mock := &MockIBashLogService{ctrl: ctrl}
	mock.recorder = &MockIBashLogServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBashLogService) EXPECT() *MockIBashLogServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIBashLogService) Create(ctx context.Context, dto dto.CreateBashLog) (*model.BashLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, dto)
	ret0, _ := ret[0].(*model.BashLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIBashLogServiceMockRecorder) Create(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIBashLogService)(nil).Create), ctx, dto)
}

// GetPaginationPageByBashId mocks base method.
func (m *MockIBashLogService) GetPaginationPageByBashId(ctx context.Context, bashId uuid.UUID, paginationParams pagination.LimitOffsetParams) (alias.BashLogLimitOffsetPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaginationPageByBashId", ctx, bashId, paginationParams)
	ret0, _ := ret[0].(alias.BashLogLimitOffsetPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaginationPageByBashId indicates an expected call of GetPaginationPageByBashId.
func (mr *MockIBashLogServiceMockRecorder) GetPaginationPageByBashId(ctx, bashId, paginationParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaginationPageByBashId", reflect.TypeOf((*MockIBashLogService)(nil).GetPaginationPageByBashId), ctx, bashId, paginationParams)
}
